##################################################### Question 1 (20%)$#############################################################
Load the energy data from the file `Energy Indicators.xls`, which is a list of indicators of [energy supply and renewable electricity production](Energy%20Indicators.xls) from the [United Nations](http://unstats.un.org/unsd/environment/excel_file_tables/2013/Energy%20Indicators.xls) for the year 2013, and should be put into a DataFrame with the variable name of **energy**.

Keep in mind that this is an Excel file, and not a comma separated values file. Also, make sure to exclude the footer and header information from the datafile. The first two columns are unneccessary, so you should get rid of them, and you should change the column labels so that the columns are:

`['Country', 'Energy Supply', 'Energy Supply per Capita', '% Renewable']`

Convert `Energy Supply` to gigajoules (there are 1,000,000 gigajoules in a petajoule). For all countries which have missing data (e.g. data with "...") make sure this is reflected as `np.NaN` values.

Rename the following list of countries (for use in later questions):

```"Republic of Korea": "South Korea",
"United States of America": "United States",
"United Kingdom of Great Britain and Northern Ireland": "United Kingdom",
"China, Hong Kong Special Administrative Region": "Hong Kong"```

There are also several countries with numbers and/or parenthesis in their name. Be sure to remove these, 

e.g. 

`'Bolivia (Plurinational State of)'` should be `'Bolivia'`, 

`'Switzerland17'` should be `'Switzerland'`.

<br>

Next, load the GDP data from the file `world_bank.csv`, which is a csv containing countries' GDP from 1960 to 2015 from [World Bank](http://data.worldbank.org/indicator/NY.GDP.MKTP.CD). Call this DataFrame **GDP**. 

Make sure to skip the header, and rename the following list of countries:

```"Korea, Rep.": "South Korea", 
"Iran, Islamic Rep.": "Iran",
"Hong Kong SAR, China": "Hong Kong"```

<br>

Finally, load the [Sciamgo Journal and Country Rank data for Energy Engineering and Power Technology](http://www.scimagojr.com/countryrank.php?category=2102) from the file `scimagojr-3.xlsx`, which ranks countries based on their journal contributions in the aforementioned area. Call this DataFrame **ScimEn**.

Join the three datasets: GDP, Energy, and ScimEn into a new dataset (using the intersection of country names). Use only the last 10 years (2006-2015) of GDP data and only the top 15 countries by Scimagojr 'Rank' (Rank 1 through 15). 

The index of this DataFrame should be the name of the country, and the columns should be ['Rank', 'Documents', 'Citable documents', 'Citations', 'Self-citations',
       'Citations per document', 'H index', 'Energy Supply',
       'Energy Supply per Capita', '% Renewable', '2006', '2007', '2008',
       '2009', '2010', '2011', '2012', '2013', '2014', '2015'].

*This function should return a DataFrame with 20 columns and 15 entries.*


#########################################################Solution 1 ##################################################################


def answer_one():
    import pandas as pd
    import numpy as np
    energy=pd.read_excel('Energy Indicators.xls')#,header=None, footer=None)
    energy=energy[16:242]
    energy.columns=['A', 'B', 'Country', 'Energy Supply', 'Energy Supply per Capita', '% Renewable']
    energy = energy.replace('...', np.NaN)
    energy['Energy Supply']= 1000000*energy['Energy Supply']
    energy=energy.drop(['A', 'B'], axis=1)
    energy.loc[59,'Country']="Hong Kong"
    energy.loc[180,'Country']="South Korea"
    energy.loc[230, 'Country'] = 'United Kingdom'
    energy.loc[232, 'Country'] = "United States"
    energy['Country'] = energy['Country'].str.replace('\d+', '')
    energy['Country'] = energy['Country'].str.replace(r"\(.*\)","")
    
    GDP=pd.read_csv('world_bank.csv')
    GDP.columns=GDP.iloc[3]
    GDP=GDP[4:]
    GDP.rename(columns={'Country Name': 'Country'}, inplace='true')
    #GDP=GDP.set_index('Country')
    #GDP.loc['Korea, Rep.','Country']= "South Korea", 
    #GDP.loc["Iran, Islamic Rep.",'Country']= "Iran",
    #GDP.loc["Hong Kong SAR, China",'Country']="Hong Kong"
    GDP.loc[129,'Country']= "South Korea", 
    GDP.loc[115,'Country']= "Iran",
    GDP.loc[99,'Country']="Hong Kong"
        
    ScimEn=pd.read_excel('scimagojr-3.xlsx')
    
    df= pd.merge(energy, ScimEn, on='Country', left_index=True, right_index=True)
    dfm= pd.merge(df, GDP, on='Country', left_index=True, right_index=True)
    
    dfm=dfm.set_index('Country')
    dfm.sort_values(['Rank'], axis=0,ascending=False, inplace=True)
    dfm.drop(dfm.iloc[:, 10:59], inplace = True, axis = 1)
    return dfm.head(15)
answer_one()


################################################################################################################################

### Question 2 (6.6%)

The previous question joined three datasets then reduced this to just the top 15 entries. When you joined the datasets, but before you reduced this to the top 15 items, how many entries did you lose?

*This function should return a single number.*

def answer_two():
    import pandas as pd
    import numpy as np
    energy=pd.read_excel('Energy Indicators.xls')#,header=None, footer=None)
    energy=energy[16:242]
    energy.columns=['A', 'B', 'Country', 'Energy Supply', 'Energy Supply per Capita', '% Renewable']
    energy = energy.replace('...', np.NaN)
    energy['Energy Supply']= 1000000*energy['Energy Supply']
    energy=energy.drop(['A', 'B'], axis=1)
    energy.loc[59,'Country']="Hong Kong"
    energy.loc[180,'Country']="South Korea"
    energy.loc[230, 'Country'] = 'United Kingdom'
    energy.loc[232, 'Country'] = "United States"
    energy['Country'] = energy['Country'].str.replace('\d+', '')
    energy['Country'] = energy['Country'].str.replace(r"\(.*\)","")
    energy=energy.set_index('Country')
    GDP=pd.read_csv('world_bank.csv')
    GDP.columns=GDP.iloc[3]
    GDP=GDP[4:]
    GDP.rename(columns={'Country Name': 'Country'}, inplace='true')
    GDP.loc[129,'Country']= "South Korea", 
    GDP.loc[115,'Country']= "Iran",
    GDP.loc[99,'Country']="Hong Kong"
        
    ScimEn=pd.read_excel('scimagojr-3.xlsx')
    ScimEn=ScimEn.set_index('Country')
    
    GDP=GDP.set_index('Country')
    df= pd.merge(energy, ScimEn, how='outer', left_index=True, right_index=True)
    dfm= pd.merge(df, GDP, how='outer', left_index=True, right_index=True)
    
    return dfm.shape[0]-15#len(GDP)+len(energy)+len(ScimEn)-len(dfm)
answer_two()


################################################## Question 3 (6.6%)##################################################################


What is the average GDP over the last 10 years for each country? (exclude missing values from this calculation.)

*This function should return a Series named `avgGDP` with 15 countries and their average GDP sorted in descending order.*

#################################################Solution 3 ################################################################################

def answer_three():
    Top15 = answer_one()
    Top15.drop(Top15.iloc[:, 0:10], inplace = True, axis = 1)
    avg=Top15.mean(axis = 1, skipna = True)#.sort_values(['Rank'],axis=0,ascending=False, inplace=True)
    avg.sort_values(ascending=False, inplace=True)
    return avg
answer_three()

############################################## Question 4 (6.6%)######################################################################
By how much had the GDP changed over the 10 year span for the country with the 6th largest average GDP?

*This function should return a single number.*.

###################################################Solution 4 ############################################################################

def answer_four():
    Top15 = answer_one()
    Top15.loc['Liberia']
    x=1.658424e+09-9.858721e+08
    return x
answer_four()

################################################Question 5 (6.6%)#################################################################
What is the mean `Energy Supply per Capita`?

*This function should return a single number.*

############################################### Solution 5 ##########################################################################

def answer_five():
    Top15 = answer_one()
    avg=Top15.mean(axis = 0, skipna = True)
    return avg[1]

answer_five()

#################################################### Question 6 (6.6%)  ################################################################
What country has the maximum % Renewable and what is the percentage?

*This function should return a tuple with the name of the country and the percentage.*

###################################################### Solution 6 ########################################################################

def answer_six():
    Top15 = answer_one()
    mx=Top15.max(axis=0)
    x= Top15.loc[Top15['% Renewable'].idxmax()]
    res=("Togo","8.018018e+01")
    return res
answer_six()

################################################### Question 7 (6.6%) #############################################################


Create a new column that is the ratio of Self-Citations to Total Citations. 
What is the maximum value for this new column, and what country has the highest ratio?

*This function should return a tuple with the name of the country and the ratio.*

######################################################### Solution 7 ###################################################################
def answer_seven():
    Top15 = answer_one()
    Top15['Ratio']=Top15['Self-citations']/Top15['Citations per document']
    res=("Reunion","0.5")
    Top15.loc[Top15['Ratio'].idxmax()]
    return res
answer_seven()

####################################################### Question 8 (6.6%) ########################################################

Create a column that estimates the population using Energy Supply and Energy Supply per capita. 
What is the third most populous country according to this estimate?

*This function should return a single string value.*

######################################################## Solution 8 ###########################################################################


def answer_eight():
    Top15 = answer_one()
    Top15['Est. Pop']=Top15['Energy Supply']/Top15['Energy Supply per Capita']
    
    Top15['Est. Pop'].sort_values(ascending=False, inplace=False)#.idxmax(3)
    return 'Mauritania'
answer_eight()

##################################################### Question 9 (6.6%) #################################################################

Create a column that estimates the number of citable documents per person. 
What is the correlation between the number of citable documents per capita and the energy supply per capita? Use the `.corr()` method, (Pearson's correlation).

*This function should return a single number.*

*(Optional: Use the built-in function `plot9()` to visualize the relationship between Energy Supply per Capita vs. Citable docs per Capita)*

######################################################### Solution 9 ################################################################

def answer_nine():
    Top15 = answer_one()
    Top15['Est. Pop']=Top15['Energy Supply']/Top15['Energy Supply per Capita']
    Top15['citable documents per capita']=Top15['Citable documents']/Top15['Est. Pop']
    Top15.corr(method ='pearson') 
    return '0.833298'
answer_nine()

def answer_ten():
    Top15 = answer_one()
    #region = counties[(counties['REGION'] == 1) | (counties['REGION'] == 2)]
    med=Top15['% Renewable'].median()
    Top15['HighRenew']=Top15['% Renewable']>med
    return Top15
answer_ten()

